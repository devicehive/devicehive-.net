using System;
using System.Collections.Generic;
using System.Net;
using System.Threading;
using System.Threading.Tasks;

namespace DeviceHive.Client
{
    /// <summary>
    /// Represents a client to the DeviceHive server.
    /// The client uses DeviceHive REST API for generic operations such as get networks, get devices, etc.
    /// and also utilizes one of available channels (LongPolling, WebSocket) for maintaining a persistent connection
    /// for retrieving real-time messages (notifications, commands) from the server according to subscriptions made.
    /// </summary>
    public interface IDeviceHiveClient
    {
        /// <summary>
        /// Gets information about the currently logged-in user.
        /// </summary>
        /// <returns>The <see cref="User"/> object.</returns>
        Task<User> GetCurrentUserAsync();

        /// <summary>
        /// Updates the currently logged-in user.
        /// The method only updates the user password.
        /// </summary>
        /// <param name="user">The <see cref="User"/> object with the new password.</param>
        Task UpdateCurrentUserAsync(User user);

        /// <summary>
        /// Gets a list of networks.
        /// </summary>
        /// <param name="filter">Network filter.</param>
        /// <returns>A list of <see cref="Network"/> objects that match specified filter criteria.</returns>
        Task<List<Network>> GetNetworksAsync(NetworkFilter filter = null);

        /// <summary>
        /// Gets a list of devices.
        /// </summary>
        /// <param name="filter">Device filter criteria.</param>
        /// <returns>A list of <see cref="Device"/> objects that match specified filter criteria.</returns>
        Task<List<Device>> GetDevicesAsync(DeviceFilter filter = null);

        /// <summary>
        /// Gets information about device.
        /// </summary>
        /// <param name="deviceGuid">Device unique identifier.</param>
        /// <returns>A <see cref="Device"/> object.</returns>
        Task<Device> GetDeviceAsync(string deviceGuid);

        /// <summary>
        /// Gets a list of device equipment states.
        /// These objects provide information about the current state of device equipment.
        /// </summary>
        /// <param name="deviceGuid">Device unique identifier.</param>
        /// <returns>A list of <see cref="DeviceEquipmentState"/> objects.</returns>
        Task<List<DeviceEquipmentState>> GetEquipmentStateAsync(string deviceGuid);

        /// <summary>
        /// Gets a list of notifications generated by the device for the specified filter criteria.
        /// </summary>
        /// <param name="deviceGuid">Device unique identifier.</param>
        /// <param name="filter">Notification filter criteria.</param>
        /// <returns>A list of <see cref="Notification"/> objects that match specified filter criteria.</returns>
        Task<List<Notification>> GetNotificationsAsync(string deviceGuid, NotificationFilter filter);

        /// <summary>
        /// Gets a list of commands sent to the device for the specified filter criteria.
        /// </summary>
        /// <param name="deviceGuid">Device unique identifier.</param>
        /// <param name="filter">Notification filter criteria.</param>
        /// <returns>A list of <see cref="Command"/> objects that match specified filter criteria.</returns>
        Task<List<Command>> GetCommandsAsync(string deviceGuid, CommandFilter filter);

        /// <summary>
        /// Gets active subscriptions for DeviceHive commands and notifications.
        /// </summary>
        /// <returns>A list of <see cref="ISubscription"/> objects representing subsription information.</returns>
        IList<ISubscription> GetSubscriptions();

        /// <summary>
        /// Adds a subscription to device notifications.
        /// Notifications could be sent by devices or by clients on behalf of devices.
        /// </summary>
        /// <param name="deviceGuids">Array of device unique identifiers to subscribe to. Specify null to subscribe to all accessible devices.</param>
        /// <param name="notificationNames">Array of notification names to subsribe to. Specify null to subscribe to all notifications.</param>
        /// <param name="callback">A callback which will be invoken when a notification is retrieved.</param>
        /// <returns>An <see cref="ISubscription"/> object representing the subscription created.</returns>
        Task<ISubscription> AddNotificationSubscriptionAsync(string[] deviceGuids, string[] notificationNames, Action<DeviceNotification> callback);

        /// <summary>
        /// Adds a subscription to device commands.
        /// Commands could only be sent by clients; this subscription would allow to listen to all commands sent to devices.
        /// </summary>
        /// <param name="deviceGuids">Array of device unique identifiers to subscribe to. Specify null to subscribe to all accessible devices.</param>
        /// <param name="commandNames">Array of command names to subsribe to. Specify null to subscribe to all commands.</param>
        /// <param name="callback">A callback which will be invoken when a command is retrieved.</param>
        /// <returns>An <see cref="ISubscription"/> object representing the subscription created.</returns>
        Task<ISubscription> AddCommandSubscriptionAsync(string[] deviceGuids, string[] commandNames, Action<DeviceCommand> callback);

        /// <summary>
        /// Removes an existing subcription.
        /// The method does not throw an exception if subscription has already been removed.
        /// </summary>
        /// <param name="subscription">An <see cref="ISubscription"/> object representing the subscription to remove.</param>
        /// <returns></returns>
        Task RemoveSubscriptionAsync(ISubscription subscription);

        /// <summary>
        /// Updates device on behalf of device.
        /// </summary>
        /// <param name="device">The <see cref="Device"/> object.</param>
        Task UpdateDeviceAsync(Device device);

        /// <summary>
        /// Sends a new notification on behalf of device.
        /// The method sets Id and Timestamp properties of the passed notification in the case of success.
        /// </summary>
        /// <param name="deviceGuid">Device unique identifier.</param>
        /// <param name="notification">A <see cref="Notification"/> object representing the notification to be sent.</param>
        /// <returns>Sent Notification object.</returns>
        Task<Notification> SendNotificationAsync(string deviceGuid, Notification notification);

        /// <summary>
        /// Sends a new command to the device.
        /// The method sets Id, Timestamp and UserId properties of the passed command in the case of success.
        /// </summary>
        /// <param name="deviceGuid">Device unique identifier.</param>
        /// <param name="command">A <see cref="Command"/> object representing the command to be sent.</param>
        /// <param name="callback">A callback action to invoke when the command is completed by the device.</param>
        /// <param name="token">Cancellation token to cancel waiting for command result.</param>
        /// <returns>Sent Command object.</returns>
        Task<Command> SendCommandAsync(string deviceGuid, Command command, Action<Command> callback = null, CancellationToken? token = null);

        /// <summary>
        /// Updates a command on behalf of the device.
        /// </summary>
        /// <param name="deviceGuid">Device unique identifier.</param>
        /// <param name="command">A <see cref="Command"/> object to update.</param>
        Task UpdateCommandAsync(string deviceGuid, Command command);

        /// <summary>
        /// Waits until the command is completed and returns a Command object with filled Status and Result properties.
        /// </summary>
        /// <param name="deviceGuid">Device unique identifier.</param>
        /// <param name="commandId">Command identifier.</param>
        /// <param name="token">Cancellation token to cancel waiting for command result.</param>
        /// <returns>A <see cref="Command"/> object with filled Status and Result properties.</returns>
        Task<Command> WaitCommandResultAsync(string deviceGuid, int commandId, CancellationToken? token);

        /// <summary>
        /// Sets an array of available channels to use for maintaining a persistent connection with the DeviceHive server.
        /// The actual channel to be used will be selected as the first object which returns the true <see cref="DeviceHive.Client.Channel.CanConnectAsync()"/> value.
        /// The default list of channels consists of the WebSocketChannel and LongPollingChannel objects.
        /// </summary>
        /// <param name="channels">The array of <see cref="Channel"/> objects to be used.</param>
        void SetAvailableChannels(Channel[] channels);

        /// <summary>
        /// Opens a persistent connection to the DeviceHive server.
        /// The persistent connection could be further used to recieve messages from the server based on subscriptions made.
        /// It is not necessary to call this method before subscribing to messages: corresponding subscription methods will open a channel automatically.
        /// In the case the channel already open, the method returns existing channel object
        /// </summary>
        /// <returns>DeviceHiveChannel object representing persistent connection to the server.</returns>
        Task<Channel> OpenChannelAsync();

        /// <summary>
        /// Closes the persistent connection to the DeviceHive server.
        /// After the channel is closed, all existing subscriptions will be invalidated.
        /// The method does not throw an exception if the channel is not currently open.
        /// </summary>
        /// <returns></returns>
        Task CloseChannelAsync();

        /// <summary>
        /// Gets a channel object representing the active persistent connection to the DeviceHive server.
        /// This property has a non-null value only if a persistent connection has been previously opened
        /// (e.g. a call to <see cref="OpenChannelAsync"/>, <see cref="AddNotificationSubscriptionAsync"/>, <see cref="SendNotificationAsync"/>, etc. has been previously made).
        /// In the most cases, the callers will not be required to access channel properties and methods directly.
        /// </summary>
        Channel Channel { get; }

        /// <summary>
        /// Gets the current state of the persistent connection to the DeviceHive server.
        /// </summary>
        ChannelState ChannelState { get; }

        /// <summary>
        /// Represent an event fired when a channel state changes.
        /// </summary>
        event EventHandler<ChannelStateEventArgs> ChannelStateChanged;
    }
}
